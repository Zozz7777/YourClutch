name: üß™ Pull Request Testing

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18'
  MONGODB_VERSION: '6.0'

jobs:
  # Code Quality Check
  code-quality:
    name: üîç Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: shared-backend/package-lock.json
        
    - name: Install dependencies
      working-directory: shared-backend
      run: npm ci
      
    - name: Run ESLint
      working-directory: shared-backend
      run: npm run lint
      
    - name: Check code formatting
      working-directory: shared-backend
      run: npm run lint:fix --dry-run
      
    - name: Security audit
      working-directory: shared-backend
      run: npm audit --audit-level=moderate

  # Backend Testing
  backend-tests:
    name: üß™ Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: shared-backend/package-lock.json
        
    - name: Install dependencies
      working-directory: shared-backend
      run: npm ci
      
    - name: Wait for MongoDB
      run: |
        echo "‚è≥ Waiting for MongoDB to be ready..."
        timeout 60 bash -c 'until mongosh --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 1; done'
        echo "‚úÖ MongoDB is ready"
        
    - name: Run health tests
      working-directory: shared-backend
      env:
        MONGODB_URI: mongodb://localhost:27017/clutch_test
        NODE_ENV: test
      run: npm run test:health
      
    - name: Run unit tests
      working-directory: shared-backend
      env:
        MONGODB_URI: mongodb://localhost:27017/clutch_test
        NODE_ENV: test
      run: npm run test:unit
      continue-on-error: true
      
    - name: Run integration tests
      working-directory: shared-backend
      env:
        MONGODB_URI: mongodb://localhost:27017/clutch_test
        NODE_ENV: test
      run: npm run test:integration
      continue-on-error: true
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: shared-backend/coverage/

  # Production Compatibility Test
  production-compatibility:
    name: üåê Production Compatibility
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: backend-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: shared-backend/package-lock.json
        
    - name: Install dependencies
      working-directory: shared-backend
      run: npm ci
      
    - name: Test production compatibility
      working-directory: shared-backend
      run: |
        echo "üß™ Testing production compatibility..."
        npm run test:production
        echo "‚úÖ Production compatibility test passed"

  # Security Testing
  security-check:
    name: üîí Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: shared-backend/package-lock.json
        
    - name: Install dependencies
      working-directory: shared-backend
      run: npm ci
      
    - name: Run security tests
      working-directory: shared-backend
      run: npm run test:security
      continue-on-error: true
      
    - name: Check for vulnerabilities
      run: |
        echo "üîç Checking for security vulnerabilities..."
        cd shared-backend
        npm audit --audit-level=high || echo "‚ö†Ô∏è High-level vulnerabilities found"

  # Performance Check
  performance-check:
    name: ‚ö° Performance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: backend-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: shared-backend/package-lock.json
        
    - name: Install dependencies
      working-directory: shared-backend
      run: npm ci
      
    - name: Run performance tests
      working-directory: shared-backend
      run: npm run test:performance
      continue-on-error: true
      
    - name: Test production performance
      run: |
        echo "‚ö° Testing production performance..."
        curl -w "@curl-format.txt" -o /dev/null -s https://clutch-main-nk7x.onrender.com/health || echo "‚ö†Ô∏è Performance test failed"
      continue-on-error: true

  # PR Summary
  pr-summary:
    name: üìä PR Summary
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests, production-compatibility, security-check, performance-check]
    if: always()
    
    steps:
    - name: Generate PR summary
      run: |
        echo "## üß™ Pull Request Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.code-quality.result }}" == "success" ]; then
          echo "| Code Quality | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Code Quality | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.backend-tests.result }}" == "success" ]; then
          echo "| Backend Tests | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Backend Tests | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.production-compatibility.result }}" == "success" ]; then
          echo "| Production Compatibility | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Production Compatibility | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security-check.result }}" == "success" ]; then
          echo "| Security Check | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Security Check | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.performance-check.result }}" == "success" ]; then
          echo "| Performance Check | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Performance Check | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìà Test Coverage" >> $GITHUB_STEP_SUMMARY
        echo "Detailed test results are available in the workflow artifacts." >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üåê Production Status" >> $GITHUB_STEP_SUMMARY
        echo "**Current Production**: https://clutch-main-nk7x.onrender.com" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: ‚úÖ Operational" >> $GITHUB_STEP_SUMMARY
        
    - name: Set PR status
      run: |
        if [ "${{ needs.code-quality.result }}" == "success" ] && 
           [ "${{ needs.backend-tests.result }}" == "success" ] && 
           [ "${{ needs.production-compatibility.result }}" == "success" ]; then
          echo "‚úÖ PR tests passed - Ready for review"
          exit 0
        else
          echo "‚ùå Critical tests failed - Please fix issues"
          exit 1
        fi
