name: Comprehensive Testing Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  BASE_URL: 'http://localhost:3000'
  BACKEND_URL: 'http://localhost:5000'

jobs:
  # Frontend Testing
  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./clutch-admin
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: clutch-admin/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Run accessibility tests
        run: npm run test:accessibility

      - name: Run performance tests
        run: npm run test:performance

      - name: Run regression tests
        run: npm run test:regression

      - name: Run auto-parts tests
        run: npm run test:auto-parts

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./clutch-admin/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Backend Testing
  backend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./shared-backend
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: shared-backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Run API tests
        run: npm run test:api

      - name: Run security tests
        run: npm run test:security

      - name: Run performance tests
        run: npm run test:performance

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./shared-backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # End-to-End Testing
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    defaults:
      run:
        working-directory: ./clutch-admin
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: clutch-admin/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start backend server
        run: |
          cd ../shared-backend
          npm ci
          npm start &
          sleep 30

      - name: Start frontend server
        run: |
          npm run build
          npm start &
          sleep 30

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: clutch-admin/playwright-report/
          retention-days: 30

  # Load Testing
  load-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    defaults:
      run:
        working-directory: ./shared-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: shared-backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start backend server
        run: |
          npm start &
          sleep 30

      - name: Run load tests
        run: npm run test:load

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: load-test-results
          path: shared-backend/test-results/
          retention-days: 30

  # Security Testing
  security-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    defaults:
      run:
        working-directory: ./shared-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: shared-backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run security tests
        run: npm run test:security

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: 'http://localhost:5000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # Performance Testing
  performance-tests:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    defaults:
      run:
        working-directory: ./clutch-admin
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: clutch-admin/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start backend server
        run: |
          cd ../shared-backend
          npm ci
          npm start &
          sleep 30

      - name: Start frontend server
        run: |
          npm start &
          sleep 30

      - name: Run Lighthouse performance tests
        run: |
          npm install -g lighthouse
          lighthouse http://localhost:3000 --output=json --output-path=./lighthouse-report.json --chrome-flags="--headless"

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lighthouse-report
          path: clutch-admin/lighthouse-report.json
          retention-days: 30

  # Test Results Summary
  test-summary:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, e2e-tests, load-tests, security-tests, performance-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate test summary
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.frontend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.backend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Load Tests | ${{ needs.load-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Coverage Reports" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Coverage: [View Report](https://codecov.io/gh/${{ github.repository }}/tree/main/clutch-admin)" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Coverage: [View Report](https://codecov.io/gh/${{ github.repository }}/tree/main/shared-backend)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Test Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Test Results: Available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Load Test Results: Available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Results: Available in artifacts" >> $GITHUB_STEP_SUMMARY

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, e2e-tests, load-tests, security-tests, performance-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production..."
          echo "All tests passed successfully!"
          echo "Deployment would happen here in a real scenario"
