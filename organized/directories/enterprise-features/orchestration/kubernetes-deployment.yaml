# Enterprise Kubernetes Deployment Configuration
# Clutch Auto Parts Shop Management System

apiVersion: v1
kind: Namespace
metadata:
  name: clutch-enterprise
  labels:
    name: clutch-enterprise
    environment: production

---
# ConfigMap for environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: clutch-config
  namespace: clutch-enterprise
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  JWT_SECRET: "your-jwt-secret-key"
  MONGODB_URI: "mongodb://mongodb-service:27017/clutch"
  REDIS_URL: "redis://redis-service:6379"
  API_GATEWAY_PORT: "3000"
  USER_SERVICE_URL: "http://user-service:3001"
  SHOP_SERVICE_URL: "http://shop-service:3002"
  PARTS_SERVICE_URL: "http://parts-service:3003"
  ORDER_SERVICE_URL: "http://order-service:3004"
  NOTIFICATION_SERVICE_URL: "http://notification-service:3005"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: clutch-secrets
  namespace: clutch-enterprise
type: Opaque
data:
  MONGODB_PASSWORD: <base64-encoded-password>
  REDIS_PASSWORD: <base64-encoded-password>
  JWT_SECRET: <base64-encoded-jwt-secret>
  ENCRYPTION_KEY: <base64-encoded-encryption-key>

---
# API Gateway Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: clutch-enterprise
  labels:
    app: api-gateway
    tier: gateway
spec:
  replicas: 3
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
        tier: gateway
    spec:
      containers:
      - name: api-gateway
        image: clutch/api-gateway:latest
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: clutch-config
              key: NODE_ENV
        - name: API_GATEWAY_PORT
          valueFrom:
            configMapKeyRef:
              name: clutch-config
              key: API_GATEWAY_PORT
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: clutch-secrets
              key: JWT_SECRET
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5

---
# API Gateway Service
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-service
  namespace: clutch-enterprise
  labels:
    app: api-gateway
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  - port: 443
    targetPort: 3000
    protocol: TCP
    name: https
  selector:
    app: api-gateway

---
# User Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: clutch-enterprise
  labels:
    app: user-service
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
        tier: backend
    spec:
      containers:
      - name: user-service
        image: clutch/user-service:latest
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: clutch-config
              key: NODE_ENV
        - name: MONGODB_URI
          valueFrom:
            configMapKeyRef:
              name: clutch-config
              key: MONGODB_URI
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: clutch-secrets
              key: MONGODB_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5

---
# User Service
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: clutch-enterprise
  labels:
    app: user-service
spec:
  ports:
  - port: 3001
    targetPort: 3001
    protocol: TCP
  selector:
    app: user-service

---
# Shop Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shop-service
  namespace: clutch-enterprise
  labels:
    app: shop-service
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: shop-service
  template:
    metadata:
      labels:
        app: shop-service
        tier: backend
    spec:
      containers:
      - name: shop-service
        image: clutch/shop-service:latest
        ports:
        - containerPort: 3002
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: clutch-config
              key: NODE_ENV
        - name: MONGODB_URI
          valueFrom:
            configMapKeyRef:
              name: clutch-config
              key: MONGODB_URI
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: clutch-secrets
              key: MONGODB_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3002
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3002
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Shop Service
apiVersion: v1
kind: Service
metadata:
  name: shop-service
  namespace: clutch-enterprise
  labels:
    app: shop-service
spec:
  ports:
  - port: 3002
    targetPort: 3002
    protocol: TCP
  selector:
    app: shop-service

---
# Parts Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: parts-service
  namespace: clutch-enterprise
  labels:
    app: parts-service
    tier: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: parts-service
  template:
    metadata:
      labels:
        app: parts-service
        tier: backend
    spec:
      containers:
      - name: parts-service
        image: clutch/parts-service:latest
        ports:
        - containerPort: 3003
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: clutch-config
              key: NODE_ENV
        - name: MONGODB_URI
          valueFrom:
            configMapKeyRef:
              name: clutch-config
              key: MONGODB_URI
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: clutch-secrets
              key: MONGODB_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3003
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3003
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Parts Service
apiVersion: v1
kind: Service
metadata:
  name: parts-service
  namespace: clutch-enterprise
  labels:
    app: parts-service
spec:
  ports:
  - port: 3003
    targetPort: 3003
    protocol: TCP
  selector:
    app: parts-service

---
# Order Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: clutch-enterprise
  labels:
    app: order-service
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
        tier: backend
    spec:
      containers:
      - name: order-service
        image: clutch/order-service:latest
        ports:
        - containerPort: 3004
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: clutch-config
              key: NODE_ENV
        - name: MONGODB_URI
          valueFrom:
            configMapKeyRef:
              name: clutch-config
              key: MONGODB_URI
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: clutch-secrets
              key: MONGODB_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3004
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3004
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Order Service
apiVersion: v1
kind: Service
metadata:
  name: order-service
  namespace: clutch-enterprise
  labels:
    app: order-service
spec:
  ports:
  - port: 3004
    targetPort: 3004
    protocol: TCP
  selector:
    app: order-service

---
# Notification Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service
  namespace: clutch-enterprise
  labels:
    app: notification-service
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: notification-service
  template:
    metadata:
      labels:
        app: notification-service
        tier: backend
    spec:
      containers:
      - name: notification-service
        image: clutch/notification-service:latest
        ports:
        - containerPort: 3005
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: clutch-config
              key: NODE_ENV
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: clutch-config
              key: REDIS_URL
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: clutch-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3005
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3005
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Notification Service
apiVersion: v1
kind: Service
metadata:
  name: notification-service
  namespace: clutch-enterprise
  labels:
    app: notification-service
spec:
  ports:
  - port: 3005
    targetPort: 3005
    protocol: TCP
  selector:
    app: notification-service

---
# MongoDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: clutch-enterprise
  labels:
    app: mongodb
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
        tier: database
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "admin"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: clutch-secrets
              key: MONGODB_PASSWORD
        - name: MONGO_INITDB_DATABASE
          value: "clutch"
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: mongodb-storage
        persistentVolumeClaim:
          claimName: mongodb-pvc

---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: clutch-enterprise
  labels:
    app: mongodb
spec:
  ports:
  - port: 27017
    targetPort: 27017
    protocol: TCP
  selector:
    app: mongodb

---
# MongoDB Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: clutch-enterprise
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: clutch-enterprise
  labels:
    app: redis
    tier: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        tier: cache
    spec:
      containers:
      - name: redis
        image: redis:7.2-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: clutch-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: clutch-enterprise
  labels:
    app: redis
spec:
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
  selector:
    app: redis

---
# Horizontal Pod Autoscaler for API Gateway
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-hpa
  namespace: clutch-enterprise
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Horizontal Pod Autoscaler for Parts Service
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: parts-service-hpa
  namespace: clutch-enterprise
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: parts-service
  minReplicas: 3
  maxReplicas: 15
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: clutch-ingress
  namespace: clutch-enterprise
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.clutch.com
    secretName: clutch-tls-secret
  rules:
  - host: api.clutch.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-gateway-service
            port:
              number: 80
