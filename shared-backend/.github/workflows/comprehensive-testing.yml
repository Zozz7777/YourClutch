name: 🚀 Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  MONGODB_VERSION: '6.0'

jobs:
  # System Health Check
  health-check:
    name: 🔍 System Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: shared-backend/package-lock.json
        
    - name: Install dependencies
      working-directory: shared-backend
      run: npm ci
      
    - name: Health check
      working-directory: shared-backend
      run: |
        echo "🔍 Running system health check..."
        npm run health:check || echo "Health check completed with warnings"

  # Unit Tests
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: health-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: shared-backend/package-lock.json
        
    - name: Install dependencies
      working-directory: shared-backend
      run: npm ci
      
    - name: Run unit tests
      working-directory: shared-backend
      run: npm run test:unit
      
    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: shared-backend/coverage/

  # Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: health-check
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: shared-backend/package-lock.json
        
    - name: Install dependencies
      working-directory: shared-backend
      run: npm ci
      
    - name: Wait for MongoDB
      run: |
        echo "⏳ Waiting for MongoDB to be ready..."
        timeout 60 bash -c 'until mongosh --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 1; done'
        echo "✅ MongoDB is ready"
        
    - name: Run integration tests
      working-directory: shared-backend
      env:
        MONGODB_URI: mongodb://localhost:27017/clutch_test
        NODE_ENV: test
      run: npm run test:integration
      
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: shared-backend/coverage/

  # API Tests
  api-tests:
    name: 🌐 API Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [health-check, unit-tests]
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: shared-backend/package-lock.json
        
    - name: Install dependencies
      working-directory: shared-backend
      run: npm ci
      
    - name: Wait for MongoDB
      run: |
        echo "⏳ Waiting for MongoDB to be ready..."
        timeout 60 bash -c 'until mongosh --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 1; done'
        echo "✅ MongoDB is ready"
        
    - name: Start server in background
      working-directory: shared-backend
      env:
        MONGODB_URI: mongodb://localhost:27017/clutch_test
        NODE_ENV: test
        PORT: 3000
      run: |
        npm start &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        sleep 10
        
    - name: Run API tests
      working-directory: shared-backend
      env:
        MONGODB_URI: mongodb://localhost:27017/clutch_test
        NODE_ENV: test
        API_BASE_URL: http://localhost:3000
      run: npm run test:api
      
    - name: Stop server
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi
        
    - name: Upload API test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-test-results
        path: shared-backend/coverage/

  # Comprehensive Backend Tests
  comprehensive-tests:
    name: 🚀 Comprehensive Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [health-check, unit-tests, integration-tests]
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: shared-backend/package-lock.json
        
    - name: Install dependencies
      working-directory: shared-backend
      run: npm ci
      
    - name: Wait for MongoDB
      run: |
        echo "⏳ Waiting for MongoDB to be ready..."
        timeout 60 bash -c 'until mongosh --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 1; done'
        echo "✅ MongoDB is ready"
        
    - name: Run comprehensive tests
      working-directory: shared-backend
      env:
        MONGODB_URI: mongodb://localhost:27017/clutch_test
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-for-ci
      run: npm run test:backend
      
    - name: Upload comprehensive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: comprehensive-test-results
        path: shared-backend/coverage/

  # Security Tests
  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: health-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: shared-backend/package-lock.json
        
    - name: Install dependencies
      working-directory: shared-backend
      run: npm ci
      
    - name: Run security audit
      working-directory: shared-backend
      run: npm audit --audit-level=moderate
      
    - name: Run security tests
      working-directory: shared-backend
      run: npm run test:security
      
    - name: Upload security test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-test-results
        path: shared-backend/coverage/

  # Performance Tests
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [health-check, api-tests]
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: shared-backend/package-lock.json
        
    - name: Install dependencies
      working-directory: shared-backend
      run: npm ci
      
    - name: Wait for MongoDB
      run: |
        echo "⏳ Waiting for MongoDB to be ready..."
        timeout 60 bash -c 'until mongosh --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 1; done'
        echo "✅ MongoDB is ready"
        
    - name: Start server in background
      working-directory: shared-backend
      env:
        MONGODB_URI: mongodb://localhost:27017/clutch_test
        NODE_ENV: test
        PORT: 3000
      run: |
        npm start &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        sleep 10
        
    - name: Run performance tests
      working-directory: shared-backend
      env:
        MONGODB_URI: mongodb://localhost:27017/clutch_test
        NODE_ENV: test
        API_BASE_URL: http://localhost:3000
      run: npm run test:performance
      
    - name: Stop server
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi
        
    - name: Upload performance test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: shared-backend/coverage/

  # Test Summary
  test-summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, api-tests, comprehensive-tests, security-tests, performance-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Generate test summary
      run: |
        echo "## 🚀 Comprehensive Testing Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.unit-tests.result }}" == "success" ]; then
          echo "| Unit Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Unit Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.integration-tests.result }}" == "success" ]; then
          echo "| Integration Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Integration Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.api-tests.result }}" == "success" ]; then
          echo "| API Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| API Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.comprehensive-tests.result }}" == "success" ]; then
          echo "| Comprehensive Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Comprehensive Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security-tests.result }}" == "success" ]; then
          echo "| Security Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Security Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.performance-tests.result }}" == "success" ]; then
          echo "| Performance Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Performance Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📈 Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "Detailed coverage reports are available in the artifacts." >> $GITHUB_STEP_SUMMARY
        
    - name: Set final status
      run: |
        if [ "${{ needs.unit-tests.result }}" == "success" ] && 
           [ "${{ needs.integration-tests.result }}" == "success" ] && 
           [ "${{ needs.api-tests.result }}" == "success" ] && 
           [ "${{ needs.comprehensive-tests.result }}" == "success" ] && 
           [ "${{ needs.security-tests.result }}" == "success" ] && 
           [ "${{ needs.performance-tests.result }}" == "success" ]; then
          echo "All tests passed! 🎉"
          exit 0
        else
          echo "Some tests failed. Please check the results above."
          exit 1
        fi
